apply plugin: 'kotlin-multiplatform'
apply from: 'android.gradle'

kotlin {
    targets {
        android()
        jvm()
        if (project.findProperty("device")?.toBoolean() ?: false) {
            iosArm64('ios') {
                compilations.main.outputKinds('FRAMEWORK')
            }
        } else {
            iosX64('ios') {
                compilations.main.outputKinds('FRAMEWORK')
            }
        }
        js()
    }

    sourceSets {
        commonMain {
            dependencies {
                implementation rootProject.ext.kotlinCommon
                implementation rootProject.ext.coroutineCommon
                implementation rootProject.ext.coroutineCommon

                // ktor
                implementation rootProject.ext.ktorClient

                // napier
                implementation rootProject.ext.napierCommon

                implementation project(':measurer')
                // write the below in your project, instead of above
                // implementation "com.github.soushin:measurer:[measurer latest version]"
            }
        }
        androidMain {
            // written in android.gradle
        }
        androidTest {
            dependencies {
            }
        }
        jvmMain {
            dependencies {
                implementation rootProject.ext.kotlin
                // coroutine
                implementation rootProject.ext.coroutine

                // ktor
                implementation rootProject.ext.ktorClientJetty

                // napier
                implementation rootProject.ext.napierJvm
            }
        }
        iosMain {
            dependencies {
                // coroutine
                implementation rootProject.ext.coroutineNative

                // ktor
                implementation rootProject.ext.ktorClientIos
                implementation rootProject.ext.ktorClientCoreNative

                // napier
                implementation rootProject.ext.napierIos
            }
        }
        jsMain {
            dependencies {
                implementation rootProject.ext.kotlinJs
                // coroutine
                implementation rootProject.ext.coroutineJs

                // ktor
                implementation rootProject.ext.ktorClientJs

                // napier
                implementation rootProject.ext.napierJs
            }
        }
    }
}

// native task
task packForXcode(type: Sync) {
    final File frameworkDir = new File(buildDir, "xcode-frameworks")
    final String mode = project.findProperty("XCODE_CONFIGURATION")?.toUpperCase() ?: 'DEBUG'

    inputs.property "mode", mode
    dependsOn kotlin.targets.ios.compilations.main.linkTaskName("FRAMEWORK", mode)

    from { kotlin.targets.ios.compilations.main.getBinary("FRAMEWORK", mode).parentFile }
    into frameworkDir

    doLast {
        new File(frameworkDir, 'gradlew').with {
            text = "#!/bin/bash\nexport 'JAVA_HOME=${System.getProperty("java.home")}'\ncd '${rootProject.rootDir}'\n./gradlew \$@\n"
            setExecutable(true)
        }
    }
}

tasks.build.dependsOn packForXcode

// js task
[compileKotlinJs, compileTestKotlinJs]*.configure {
    kotlinOptions {
        moduleKind = "umd"
    }
}

task packForJs(type: Copy, dependsOn: compileKotlinJs) {
    from compileKotlinJs.destinationDir

    into "${buildDir}/js_modules"
}

tasks.build.dependsOn packForJs

configurations {
    compileClasspath
}
